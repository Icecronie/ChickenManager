@page "/User/RegisterUser"

@inject ISqlDataAccess _data
@inject IConfiguration _config
@inject NavigationManager Navigationmanager

@using ChickenManager.Models
@using DataAccess
@using Radzen.Blazor;

<h3>Register User</h3>

<div class="rz-p-0 rz-p-md-12">
    <RadzenTemplateForm TItem="Models.User" Data=@user Submit=@CreateUser>
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeSM="6">
                <RadzenStack>
                    <RadzenFormField Text="First Name" Variant="@variant">
                        <RadzenTextBox @bind-Value="@user.FirstName" Name="firstname"/>
                        <RadzenRequiredValidator Component="firstname" Text="First Name is required" Popup="@popup"/>
                        <RadzenLengthValidator Component="firstname" Min="3" Text="First Name needs to be at least 3 characters" Popup=@popup />
                    </RadzenFormField>
                    <RadzenFormField Text="Last Name" Variant="@variant">
                        <RadzenTextBox @bind-Value=@user.LastName Name="lastname"/>
                        <RadzenRequiredValidator Component="lastname" Text="Last Name is required" Popup="@popup" />
                    </RadzenFormField>
                    <RadzenFormField Text="Username" Variant="@variant">
                        <RadzenTextBox @bind-Value=@user.CreatorName Name="username"/>
                        <RadzenRequiredValidator Component="username" Text="Username is required" Popup="@popup" />
                        <RadzenLengthValidator Component="username" Min="3" Text="Username needs to be at least 3 characters" Popup=@popup />
                    </RadzenFormField>
                    <RadzenFormField Text="Email" Variant="@variant">
                        <RadzenTextBox @bind-Value=@user.Email Name="Email" />
                        <RadzenRequiredValidator Component="Email" Text="Email is required" Popup="@popup" />
                        <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup="@popup" />
                    </RadzenFormField>
                    <RadzenFormField Text="Phone Number" Variant="@variant">
                        <RadzenTextBox @bind-Value=@user.PhoneNumber Name="phonenumber"/>
                    </RadzenFormField>
                    <RadzenFormField Text="Password" Variant="@variant">
                        <RadzenPassword Placeholder="Enter password" Text="Password" @bind-Value="@user.Password" Name="password" />
                        <RadzenRequiredValidator Component="password" Text="Password is required" Popup="@popup" />
                        <RadzenLengthValidator Component="password" Min="8" Text="Password must be at least 8 characters" Popup=@popup />
                    </RadzenFormField>
                    <RadzenFormField Text="Confirm Password" Variant="@variant">
                        <RadzenPassword  @bind-Value="@user.ConfirmPassword" Name="confirmpassword"/>
                        <RadzenRequiredValidator Component="confirmpassword" Text="Confirm Password is required" Popup="@popup" />
                        <RadzenLengthValidator Component="confirmpassword" Min="8" Text="Confirm Password must be at least 8 characters" Popup=@popup />
                        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(user.Password)) Value=@user.Password Component="confirmpassword" Text="Passwords must match" Popup=@popup />
                    </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit">Register User</RadzenButton>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
</div>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
   
}

@code {
    public class Order
    {
        public int CardId { get; set; }
        public string CardNr { get; set; }
        public DateTime ExpiryDate { get; set; }
        public string CardHolder { get; set; }
        public string Name { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Zip { get; set; }
        public int Country { get; set; }
        public int StoreId { get; set; }
        public string Warehouse { get; set; }
        public string Region { get; set; }
        public string System { get; set; }
        public int TransId { get; set; }
        public string Register { get; set; }
        public string Clerk { get; set; }
        public decimal Amount { get; set; }
        public decimal Tax { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime ShipDate { get; set; }
    }

    public class CreditCard
    {
        public int CardId { get; set; }
        public string CardNr { get; set; }
    }

    public class Country
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    Order order = new Order()
        {
            ExpiryDate = DateTime.Parse("10/10/2022"),
            OrderDate = DateTime.Now,
            ShipDate = DateTime.Now
        };

    List<CreditCard> cards = new List<CreditCard>()
{
        new CreditCard() { CardId = 1, CardNr = "5555555555554444" },
        new CreditCard() { CardId = 2, CardNr = "4012888888881881" }
    };

    List<Country> countries = new List<Country>()
{
        new Country() { Id = 1, Name = "USA" },
        new Country() { Id = 2, Name = "Germany" }
    };

    void Submit(Models.User arg)
    {
        //
    }

    void Cancel()
    {
        //
    }
}
